// Generated by CoffeeScript 1.3.1
(function() {

  describe("InfiniScroll", function() {
    var PAGE_SIZE;
    PAGE_SIZE = 25;
    beforeEach(function() {
      var Collection, Model;
      Collection = Backbone.Collection.extend({
        url: "/example"
      });
      Model = Backbone.Model.extend({
        calculatedParam: function() {}
      });
      this.model = new Model({
        id: 1
      });
      this.collection = new Collection([this.model]);
      this.collection.length = 25;
      this.view = new Backbone.View({
        collection: this.collection
      });
      this.options = {
        success: function() {},
        error: function() {},
        onFetch: function() {}
      };
      this.infini = new Backbone.InfiniScroll(this.collection, this.options);
    });
    afterEach(function() {
      this.infini.destroy();
    });
    it("should bind to Backbone.InfiniScroll", function() {
      expect(Backbone.InfiniScroll).toBeDefined();
    });
    describe("initialization", function() {
      return it("should have default values when no options are passed", function() {
        var infini;
        infini = new Backbone.InfiniScroll(this.collection);
        expect(infini.options.param).toEqual("until");
        expect(infini.options.untilAttr).toEqual("id");
        expect(infini.options.pageSize).toEqual(25);
        expect(infini.options.scrollOffset).toEqual(100);
        expect(infini.options.add).toEqual(true);
        return expect(infini.options.includePage).toEqual(false);
      });
    });
    describe("#fetchSuccess", function() {
      beforeEach(function() {
        return this.collection.length = PAGE_SIZE;
      });
      describe("with an included external success callback", function() {
        return it("should call the provided success callback", function() {
          spyOn(this.infini.options, "success");
          spyOn(this.infini.options, "error");
          this.infini.fetchSuccess(this.collection, []);
          return expect(this.infini.options.success).toHaveBeenCalledWith(this.collection, []);
        });
      });
      describe("when in strict mode", function() {
        beforeEach(function() {
          this.infini = new Backbone.InfiniScroll(this.collection, {
            strict: true
          });
          spyOn(this.infini, "enableFetch");
          return spyOn(this.infini, "disableFetch");
        });
        return it("should disable fetch when the response page size is less than the requested page size", function() {
          this.collection.length = PAGE_SIZE * 1.5;
          this.infini.fetchSuccess(this.collection, [
            {
              id: 1
            }
          ]);
          return expect(this.infini.disableFetch).toHaveBeenCalled();
        });
      });
      return describe("when not in strict mode", function() {
        beforeEach(function() {
          this.infini = new Backbone.InfiniScroll(this.collection, {
            strict: false
          });
          spyOn(this.infini, "enableFetch");
          return spyOn(this.infini, "disableFetch");
        });
        it("should disable fetch when the response page size is 0", function() {
          this.infini.fetchSuccess(this.collection, []);
          return expect(this.infini.disableFetch).toHaveBeenCalled();
        });
        return it("should not disable fetch when the response size is greater than 0", function() {
          this.infini.fetchSuccess(this.collection, [
            {
              id: 1
            }
          ]);
          return expect(this.infini.enableFetch).toHaveBeenCalled();
        });
      });
    });
    describe("#fetchError", function() {
      return describe("with an included external error callback", function() {
        return it("should call the provided error callback", function() {
          spyOn(this.infini.options, "success");
          spyOn(this.infini.options, "error");
          this.infini.fetchError(this.collection, null);
          return expect(this.infini.options.error).toHaveBeenCalledWith(this.collection, null);
        });
      });
    });
    return describe("#watchScroll", function() {
      beforeEach(function() {
        this.event = jQuery.Event("scroll");
        return spyOn(this.collection, "fetch");
      });
      describe("when the window is scrolled above the threshold", function() {
        beforeEach(function() {
          var _this = this;
          this.scrollTop = 600;
          spyOn($.fn, "scrollTop").andCallFake(function() {
            return _this.scrollTop;
          });
          spyOn($.fn, "height").andReturn(600);
          this.infini.watchScroll(this.event);
          this.queryParams = {};
          this.queryParams[this.infini.options.param] = this.collection.last().get(this.infini.options.untilAttr);
          return this.collection.length = 50;
        });
        it("should call collection fetch with the query param, until offset, success, and error callbacks", function() {
          return expect(this.collection.fetch).toHaveBeenCalledWith({
            success: this.infini.fetchSuccess,
            error: this.infini.fetchError,
            add: true,
            data: this.queryParams
          });
        });
        it("should disable scroll watch until the fetch has returned", function() {
          expect(this.collection.fetch).toHaveBeenCalledWith({
            success: this.infini.fetchSuccess,
            error: this.infini.fetchError,
            add: true,
            data: this.queryParams
          });
          this.infini.watchScroll(this.event);
          expect(this.collection.fetch.callCount).toEqual(1);
          this.infini.watchScroll(this.event);
          expect(this.collection.fetch.callCount).toEqual(1);
          this.infini.fetchSuccess(this.collection, [
            {
              id: 1
            }
          ]);
          this.infini.watchScroll(this.event);
          return expect(this.collection.fetch.callCount).toEqual(2);
        });
        describe("when given the includePage option", function() {
          return it("should include the page count in the query params", function() {
            var infini;
            infini = new Backbone.InfiniScroll(this.collection, {
              includePage: true
            });
            this.queryParams[infini.options.param] = this.collection.last().get(infini.options.untilAttr);
            this.queryParams["page"] = 2;
            infini.watchScroll(this.event);
            return expect(this.collection.fetch).toHaveBeenCalledWith({
              success: infini.fetchSuccess,
              error: infini.fetchError,
              add: true,
              data: this.queryParams
            });
          });
        });
        describe("when untilAttr is a function", function() {
          return it("should call the untilAttr function", function() {
            var infini;
            spyOn(this.model, "calculatedParam");
            this.options.untilAttr = "calculatedParam";
            infini = new Backbone.InfiniScroll(this.collection, this.options);
            infini.watchScroll(this.event);
            expect(this.model.calculatedParam).toHaveBeenCalled();
            return infini.watchScroll(this.event);
          });
        });
        return describe("when the window is scrolled up", function() {
          return it("should not call collection fetch", function() {
            this.infini.watchScroll(this.event);
            expect(this.collection.fetch).toHaveBeenCalled();
            this.scrollTop = 599;
            this.infini.enableFetch();
            this.infini.watchScroll(this.event);
            return expect(this.collection.fetch.callCount).toEqual(1);
          });
        });
      });
      return describe("when the window is scrolled bellow the threshold", function() {
        return it("should not call collection fetch", function() {
          spyOn($.fn, "scrollTop").andReturn(-101);
          spyOn($.fn, "height").andReturn(200);
          this.infini.watchScroll(this.event);
          return expect(this.collection.fetch).not.toHaveBeenCalled();
        });
      });
    });
  });

}).call(this);
